export default {
    string(a, b) => {
        if a < b {
            return -1
        }
        if a > b {
            return 1
        }
        return 0
    }
    number(a, b) => a - b
    reverse(sortFunc) =>
        (a, b) => -(sortFunc(a, b))
    map(mapFunc, sortFunc) =>
        (a, b) => sortFunc(mapFunc(a), mapFunc(b))
    prop(propName, sortFunc) => {
        let propFunc = Function*("source", `return source${propName}`)
        return (a, b) => sortFunc(propFunc(a), propFunc(b))
    }
    compose(...sortFuncs) =>
        (a, b) => {
            for sortFunc in sortFuncs {
                let compared = sortFunc(a, b)
                if compared != 0 {
                    return compared
                }
            }
            return 0
        }
    natural: Intl.Collator*(void, {numeric: true}).compare
}
